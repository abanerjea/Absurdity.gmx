<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
*   Create Evidence Inventory
*/

//Declare global variables
for (i = 0; i &lt; global.numberOfEvidence; i += 1)
{
    global.EvidenceInventory[i] = instance_create(0, 0, obj_Item);
    if (file_exists("Save.sav"))
    {
        var name = "evidence" + string(i);
        ini_open("Save.sav");
        global.EvidenceInventory[i].type = ini_read_real(name, "type", 1);
        global.EvidenceInventory[i].text = ini_read_string(name, "text", "Evidence");
        global.EvidenceInventory[i].slot = ini_read_real(name, "slot", i);
        global.EvidenceInventory[i].x = ini_read_real(name, "x", view_xview[0] + view_wview[0]/2 + 150);
        global.EvidenceInventory[i].y = ini_read_real(name, "y", view_yview[0] + 200 + i * (32 + 50));
        ini_close();
    }
    else
    {
        global.EvidenceInventory[i].type = 1;
        global.EvidenceInventory[i].text = "Evidence ";
        global.EvidenceInventory[i].slot = i;
        
        x1 = view_xview[0] + view_wview[0]/2;
        y1 = view_yview[0];
        x2 = view_xview[0] + view_wview[0];
        y2 = view_yview[0] + view_hview[0];
        
        var ix = x1 + 150;
        var iy = y1 + 200 + i * (32 + 50);
        
        global.EvidenceInventory[i].x = ix;
        global.EvidenceInventory[i].y = iy;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
* Draw Evidence Inventory Background
*/
if (global.showEvidenceInventory)
{
    x1 = view_xview[0] + view_wview[0]/2;
    y1 = view_yview[0];
    x2 = view_xview[0] + view_wview[0];
    y2 = view_yview[0] + view_hview[0];
    
    draw_set_alpha(0.8);
    draw_set_colour(c_black);
    draw_rectangle(x1, y1, x2, y2, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
*   Draw Evidence slots
*/
if (global.showEvidenceInventory)
{
    draw_set_alpha(1);
    for (i = 0; i &lt; global.numberOfEvidence; i += 1)
    {
        draw_sprite(spr_border, 0, global.EvidenceInventory[i].x, global.EvidenceInventory[i].y);
    }   
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
*   Highlight Evidence Slot
*/
if (global.showEvidenceInventory)
{
    draw_set_alpha(0.6);
    draw_set_colour(c_white);
    for (i = 0; i &lt; global.numberOfEvidence; i += 1)
    {
        var temp_x = global.EvidenceInventory[i].x;
        var temp_y = global.EvidenceInventory[i].y;
        if (abs(mouse_x - temp_x) &lt; 16) &amp;&amp; (abs(mouse_y - temp_y) &lt; 16)
        {
            draw_rectangle(temp_x - 16, temp_y - 16, temp_x + 16, temp_y + 16, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
*   Draw Evidence Inventory Evidence
*/

if (global.showEvidenceInventory)
{
    draw_set_alpha(1);
    for (i = 0; i &lt; global.numberOfEvidence; i += 1)
    {
        if (global.EvidenceInventory[i].type != 0)
        {
            draw_sprite(spr_items, 
                        global.EvidenceInventory[i].slot, 
                        global.EvidenceInventory[i].x,
                        global.EvidenceInventory[i].y);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
